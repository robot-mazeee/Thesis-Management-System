package pt.ulisboa.tecnico.rnl.dei.tms.person.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import pt.ulisboa.tecnico.rnl.dei.tms.exceptions.DEIException;
import pt.ulisboa.tecnico.rnl.dei.tms.exceptions.ErrorMessage;
import pt.ulisboa.tecnico.rnl.dei.tms.person.domain.Person;
import pt.ulisboa.tecnico.rnl.dei.tms.person.dto.PersonDto;
import pt.ulisboa.tecnico.rnl.dei.tms.person.repository.PersonRepository;

@Service
@Transactional
public class PersonService {

	@Autowired 
	private PersonRepository personRepository;

	private Person fetchPersonOrThrow(long id) {
		return personRepository.findById(id)
				.orElseThrow(() -> new DEIException(ErrorMessage.NO_SUCH_PERSON, Long.toString(id)));
	}

	@Transactional
	public List<PersonDto> getPeople() {
		return personRepository.findAll().stream()
				.map(PersonDto::new)
				.toList();
	}

	@Transactional
	public List<PersonDto> getStudents() {
		return personRepository.findByType(Person.PersonType.STUDENT).stream()
				.map(PersonDto::new)
				.toList();
	}

	@Transactional
	public List<PersonDto> getProfessors() {
		return personRepository.findByType(Person.PersonType.PROFESSOR).stream()
				.map(PersonDto::new)
				.toList();
	}

	@Transactional
	public PersonDto createPerson(PersonDto personDto) {
		// TODO: validation, maybe...?
		Person person = new Person(personDto);
		person.setId(null); // to ensure that the id is generated by the database
		// save person to database
		return new PersonDto(personRepository.save(person));
	}

	@Transactional
	public PersonDto getPerson(long id) {
		return new PersonDto(fetchPersonOrThrow(id));
	}

	@Transactional
	public PersonDto updatePerson(long id, PersonDto personDto) {
		fetchPersonOrThrow(id); // ensure exists

		// FIXME: hmmm, updatePerson and createPerson are very similar
		// maybe we should refactor this? have a
		// `private PersonDto something(Long id, PersonDto personDto)` method?
		// ...or maybe not...
		Person person = new Person(personDto);
		person.setId(id);
		return new PersonDto(personRepository.save(person));
	}

	@Transactional
	public void deletePerson(long id) {
		fetchPersonOrThrow(id); // ensure exists

		personRepository.deleteById(id);
	}
}
